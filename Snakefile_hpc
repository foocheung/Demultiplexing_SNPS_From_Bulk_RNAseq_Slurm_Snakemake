from os import listdir
import glob
import os

# Define the Conda environment
#conda: "/data/chi/PROJECTS/TEMP/BULK_RNA_SEQUENCING/240627_VH00286_149_AACCG3YHV/TEST/environment.yml"
#/data/chi/PROJECTS/TEMP/BULK_RNA_SEQUENCING/240627_VH00286_149_AACCG3YHV/TEST
configfile: "/data/chi/PROJECTS/TEMP/BULK_RNA_SEQUENCING/240627_VH00286_149_AACCG3YHV/TEST3/config.yaml"
#prin://cdn.sstatic.net/Img/teams/teams-illo-free-sidebar-promo.svg?v=47faa659a05et (config['samples'])
#SAMPLES = set(samples)
#print (config['samples'])
#config6.yaml


rule all:
    input:
        "star.log",
        expand("outdir/{sample}_output/Aligned.sortedByCoord.out.bam", sample = config['samples']),
	expand("outdir/{sample}_output/Aligned.sortedByCoord.out.bam.sort", sample = config['samples']),
	expand("outdir/{sample}_output/Aligned.sortedByCoord.out.bam.sort.fixmate", sample = config['samples']),
	expand("outdir/{sample}_output/Aligned.sortedByCoord.out.bam.sort.fixmate.sort", sample = config['samples']),	
	expand("outdir/{sample}_output/Aligned.sortedByCoord.out.bam.sort.fixmate.sort.markdup",sample = config['samples']),
        "ALIGN/hg19_snp15_markdup_309.bcf",
        "ALIGN/hg19_snp15_markdup_309.vcf",
        "ALIGN/out2.txt.relatedness2",
        "ALIGN/out2.pdf" 

rule a_conda_rule:
    output: "star.log" 
#    conda: "/data/chi/PROJECTS/TEMP/BULK_RNA_SEQUENCING/240627_VH00286_149_AACCG3YHV/TEST/environment.yml"
    shell:
        "which STAR > star.log"

rule pass1:
        input:
            R1L1 = '/data/chi/PROJECTS/TEMP/BULK_RNA_SEQUENCING/240627_VH00286_149_AACCG3YHV/TEST3/FA/{sample}_R1_001.fastq.gz', # may need adjustment if your fastq file name format is different
            R2L1 = '/data/chi/PROJECTS/TEMP/BULK_RNA_SEQUENCING/240627_VH00286_149_AACCG3YHV/TEST3/FA/{sample}_R2_001.fastq.gz',
            refdir = ('/data/chi/PROJECTS/TEMP/BULK_RNA_SEQUENCING/240627_VH00286_149_AACCG3YHV/TEST/COVID/KINSHIP/hg19/CURRENT')
        params:
            outdir = 'outdir/{sample}_output'
        output:
            "outdir/{sample}_output/Aligned.sortedByCoord.out.bam"
        threads: 1 # set the maximum number of available cores
#	conda: "environment.yml"
        shell:
            'rm -rf {params.outdir} &&' # be careful with this. I don't know why, but Snakemake had problems without this cleaning.
            'mkdir {params.outdir} && ' # snakemake had problems finding output files with --outFileNamePrefix, so I used this approach instead
            'cd {params.outdir} && '
            'STAR --runThreadN {threads} '
            '--genomeDir {input.refdir} '
            '--readFilesIn {input.R1L1} {input.R2L1} '
            '--readFilesCommand zcat '
            '--outSAMtype BAM SortedByCoordinate && cd ..'


rule sort:
        input:
            sortbam = 'outdir/{sample}_output/Aligned.sortedByCoord.out.bam'
        params:
            outdir = 'outdir/{sample}_output'
        output:
             outdir = 'outdir/{sample}_output/Aligned.sortedByCoord.out.bam.sort'
        threads:1  # set the maximum number of available cores
#	conda: "environment.yml"
        shell:
            'samtools  sort -@ 6 -n {input.sortbam} -o  {output.outdir}'

rule fixmate:
        input:
            fixmate = 'outdir/{sample}_output/Aligned.sortedByCoord.out.bam.sort'
        params:
            outdir = 'outdir/{sample}_output'
        output:
             outdir = 'outdir/{sample}_output/Aligned.sortedByCoord.out.bam.sort.fixmate'
        threads:1  # set the maximum number of available cores
#	conda: "environment.yml"
        shell:
            'samtools  fixmate -@ 6 -m {input.fixmate} {output.outdir}'

rule sort2:
        input:
            sortbam2 = 'outdir/{sample}_output/Aligned.sortedByCoord.out.bam.sort.fixmate'
        params:
            outdir = 'outdir/{sample}_output'
        output:
             outdir = 'outdir/{sample}_output/Aligned.sortedByCoord.out.bam.sort.fixmate.sort'
        threads:1  # set the maximum number of available cores
#	conda: "environment.yml"
        shell:
            'samtools  sort -@ 6 {input.sortbam2} -o  {output.outdir}'


rule markdup:
        input:
            sortfixmate = 'outdir/{sample}_output/Aligned.sortedByCoord.out.bam.sort.fixmate.sort'
        params:
            outdir = 'outdir/{sample}_output'
        output:
            outdir = 'outdir/{sample}_output/Aligned.sortedByCoord.out.bam.sort.fixmate.sort.markdup'
        threads:1  # set the maximum number of available cores
#	conda: "environment.yml"
        shell:
            'samtools  markdup -@ 6 -r {input.sortfixmate}  {output.outdir}'


rule mpileup:
        input:
            allsortfixmate = expand('outdir/{sample}_output/Aligned.sortedByCoord.out.bam.sort.fixmate.sort', sample=config["samples"]),
            snp='/data/chi/PROJECTS/TEMP/BULK_RNA_SEQUENCING/240627_VH00286_149_AACCG3YHV/TEST/COVID/KINSHIP/SNP_DB/SNP_DB.bed_minuschr.bed',
	    genomedir='/data/chi/PROJECTS/TEMP/BULK_RNA_SEQUENCING/240627_VH00286_149_AACCG3YHV/TEST/COVID/KINSHIP/hg19/Genome.fa'
        output:
            outdir = 'ALIGN/hg19_snp15_markdup_309.bcf'
        threads:1  # set the maximum number of available cores
#	conda: "environment.yml"
        shell:
            'bcftools mpileup -A -q 4 -t AD,DP -T /data/chi/PROJECTS/TEMP/BULK_RNA_SEQUENCING/240627_VH00286_149_AACCG3YHV/TEST/COVID/KINSHIP/SNP_DB/SNP_DB.bed_minuschr.bed  -f /data/chi/PROJECTS/TEMP/BULK_RNA_SEQUENCING/240627_VH00286_149_AACCG3YHV/TEST/COVID/KINSHIP/hg19/Genome.fa   {input.allsortfixmate} | bcftools call -m  -O b -f GQ > ALIGN/hg19_snp15_markdup_309.bcf'
rule convert:
        input:
            bcf = 'ALIGN/hg19_snp15_markdup_309.bcf'
        output:
            outdir = 'ALIGN/hg19_snp15_markdup_309.vcf'
#	conda: "environment.yml"
        shell:
            'bcftools convert ALIGN/hg19_snp15_markdup_309.bcf >  ALIGN/hg19_snp15_markdup_309.vcf'

#vcftools v2CVPYR2.vcf relatedness_out.txt
rule relatedness:
        input:
            bcf = 'ALIGN/hg19_snp15_markdup_309.vcf'
        output:
            outdir = 'ALIGN/out2.txt.relatedness2'
#	conda: "environment.yml"
        shell:
#            'vcftools --vcf ALIGN/hg19_snp15_markdup_309.vcf --out ALIGN/out2.txt --relatedness2'
             'vcftools --vcf ALIGN/hg19_snp15_markdup_309.vcf --out ALIGN/out2.txt --relatedness'
#heatmap Rscript ./heatmap_related3.R ./ALIGN/out.txt.relatedness2 ./ALIGN/out.pdf
rule heatmap:
        input:
            related = 'ALIGN/out2.txt.relatedness2'
        output:
            outdir = 'ALIGN/out2.pdf'
#	conda: "environment.yml"
        shell:
            'Rscript ./heatmap_related.R ./ALIGN/out2.txt.relatedness2 ./ALIGN/out2.pdf'
